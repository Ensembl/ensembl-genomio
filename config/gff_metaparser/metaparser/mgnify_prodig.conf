# MGnify (prokaryotic) config

# copy from gff_metaparser.conf
@GENE	ALIAS	gene,ncrna_gene,pseudogene
@MRNA	ALIAS	mrna,transcript,pseudogenic_transcript,pseudogenic_trna,guide_rna,lnc_rna,telomerase_RNA
@MRNA	ALIAS	rnase_mrp_rna,rnase_p_rna,srp_rna,ncrna,rrna,snrna,snorna,trna,pre_mirna,mirna,pirna
@MRNA	ALIAS	IG_V_gene,IG_C_gene,TR_C_gene,TR_V_gene,V_gene_segment,C_gene_segment,antisense_RNA
@MRNA	ALIAS	scrna,scarna
@UTR	ALIAS	five_prime_UTR,three_prime_UTR

@DESCR	ALIAS	description,fullname,product
@BIOTYPE	ALIAS	gene_biotype,biotype

# case insesitive (all to lower)
#@GENE
@GENE/id	GFF
@GENE/@BIOTYPE	GFF	biotype
@GENE/id	JSON	gene/id	{"object_type":"gene"}
# descriptions, etc. from CDS / ncRNA


#@MRNA
@MRNA/id GFF
@MRNA/parent	GFF	# obsolete
@MRNA/@BIOTYPE	GFF	biotype
@MRNA/id	JSON	mrna/id	{"object_type":"transcript"}
@MRNA/product	JSON	gene:_PARENT/!description	{"_IGNORE":"hypothetical protein"}

@MRNA/db_xref	JSON	mrna/@xrefs	{"_SPLIT":":;dbname;id"}
# dangling xrefs
@MRNA/rfam	JSON	mrna/@xrefs	{"_PREPEND":"RFAM:", "_SPLIT":":;dbname;id"}

# exotic
@MRNA/stop_codon_redefined_as_selenocysteine	JSON	mrna/force_stop_to_sec	{"force_stop_to_sec":true}


#EXON
# no exon/id
exon/parent	GFF	# obsolete
exon/@BIOTYPE	GFF	biotype


# CDS
# cds/parent	GFF	# we'll be preserved automatically
cds/id	GFF
cds/protein_id	GFF_SUB	ID,protein_id # overwrite and copy

cds/id	JSON	cds/id	{"object_type":"translation"}
cds/protein_id	JSON_SUB	cds/id	# overwrite
cds/product	JSON	gene:_PARENT/!description	{"_IGNORE":"hypothetical protein"}

# to make name default synonyms to show them via display xref id mechanism
cds/name	JSON	gene:_PARENT	{"object_type":"gene","synonyms":[{"synonym":"_LEAFVALUE", "default":true}]}

cds/db_xref	JSON	cds/@xrefs	{"_SPLIT":":;dbname;id"}
# dangling xrefs
#   better to ignores those that are loaded by the ProteinFeatures or RNAFeatures pipelines
cds/cog	JSON	cds/@xrefs	{"_PREPEND":"COG:", "_SPLIT":":;dbname;id", "_IGNORE":"^-$"} # is it a COG categgory?
cds/ec_number	JSON	cds/@xrefs	{"_PREPEND":"EC_NUMBER:", "_SPLIT":":;dbname;id"}
cds/eggnog	JSON	cds/@xrefs	{"_PREPEND":"eggNOG:", "_SPLIT":":;dbname;id"} # no such xref registered yet
cds/interpro	JSON	cds/@xrefs	{"_PREPEND":"InterPro:", "_SPLIT":":;dbname;id", "_IGNORE":"^-$"} # is it a COG categgory? id is in dbxrefs
cds/kegg	JSON	cds/@xrefs	{"_PREPEND":"KEGG!","_SPLIT":"!;dbname;id", "_IGNORE":"^-$"} # is it a KEGG_Enzyme? # KEGG=ko:K01962,ko:K01963
cds/pfam	JSON	cds/@xrefs	{"_PREPEND":"PFAM:", "_SPLIT":":;dbname;id"}

# to propagate CDS and ~mRNA xrefs to gene JSON 
# @MRNA/dbxref	JSON	gene:_PARENT/@xrefs	{"_SPLIT":":;dbname;id"}
# cds/dbxref	JSON	gene:_PARENT/@xrefs	{"_SPLIT":":;dbname;id"}


# SEQ_REGIONS
#   filter them into a separate file

# IDS
@SEQR4ID	ALIAS	chromosome_band,centromere,region,scaffold

@SEQR4ID	JSON	seq_region:_SEQID	{"object_type":"seq_region", "name":"_SEQID"}	# even for plain features, without qualifiers 
#special case for codon_table
cds/transl_table	JSON	seq_region:_SEQID/codon_table	{"object_type":"seq_region", "name":"_SEQID", "_NUMVAL" : "int"}

# aliases
region/name	JSON	seq_region:_SEQID/@synonyms/name	{"_IGNORE":"Unknown"}
region/alias	JSON	seq_region:_SEQID/@synonyms/name	{"_IGNORE":"Unknown"}

# is_circular
region/is_circular	JSON	seq_region:_SEQID/circular	{"circular":true}


