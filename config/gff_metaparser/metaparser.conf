# IDs can be substituted, but can be  ommited only for leaves
# parents can't be ommited from GFF, paresnt, phase and strand  will be preserved in GFF

# predefined _SEQID _SRC _TYPE _START _END _STRAND _PHASE _QUALS _PARENTID _FULLTAG _LEAFTAG _LEAFVALUE

# rules:
# (feature|@alias)/qualifier	JSON_RULE	objecttype(:_CTX_ID|_PARENT)?/deeper/into/the/json	{"json":"appended to 'the', -2 level"}
#
# JSON can have only one '@' in the path string, to treat the following tag as list
# JSON can hane '!' only for the last tag to force treating it as scalar
# JSON can have additional json, which will be inserted into the object json
#   initial values will be overwritten by values from {json}
# JSON can have (in the order of interpolation)
#   value in JSON can be one of the predefined ones _SEQID, etc...
#   if tech actions present, they are run in the follwing order: 
#     "_PREPEND" : "PREFIX"
#     "_APPEND" : "SUFFIX"
#     "_SPLIT" : "DELIM;TAG1;TAG2;..."
#     "_SUB" : "REGEXP;REPLACEMENT"
#     "_MAP" : {"from":"to", ..., "_IGNORE_REST" : true}, map , if "_IGNORE_REST" used, eveyrthing not mapped, will be ignored
#     "_IGNORE": (JSON array | string)  with regexps to ignore
#     "_NUMVAL": ("int" | true) cast to number (int first, then float) if possible, to int if "int"
#
# JSON will add only if the previous value is emty
# JSON_SUB will substitute with the fresh value, if the fresh value is not emty
#
# (feature|@alias)/qualifier	GFF_RULE	new,LIST,of,qualifiers
# if new qualifier list is empty, using the original one
# GFF will add value, if value is not empty
# GFF_SUB will substitute with the fresh, if the fresh value is not emty
#
# GFF rule can have JSON part in the form
#   {"_FROM_STASH" : "<TO>":"<FROM_PATH>", "_IGNORE": ["pat1", "pat2", ...]}
#     i.e.  {"_FROM_STASH":{"ID": "mrna:_PARENT/_STASH/cds_id"}}
#     or {"_FROM_STASH":{"_IGNORE": ["Trna", "ND", "COX"]}}
#   if "_IGNORE" rule is used, changes are made/stored
#      only if the corresponding values do not match
#      against concatinations of patterns: "pat1|pat2|..."
#
# patches (in a separate file):
#   if pattern as a plaing string(no aliasing) and rule name are equal, config rule is substituted with the patch one
#   if DISCARD is used as the only 3rd paramete, rule from config is discarded

# type aliases
@GENE	ALIAS	gene,ncrna_gene,pseudogene
@MRNA	ALIAS	mrna,transcript,pseudogenic_transcript,pseudogenic_trna,guide_rna,lnc_rna,telomerase_RNA
@MRNA	ALIAS	rnase_mrp_rna,rnase_p_rna,srp_rna,ncrna,rrna,snrna,snorna,trna,pre_mirna,mirna,pirna
@MRNA	ALIAS	IG_V_gene,IG_C_gene,TR_C_gene,TR_V_gene,V_gene_segment,C_gene_segment,antisense_RNA
@UTR	ALIAS	five_prime_UTR,three_prime_UTR

@DESCR	ALIAS	description,fullname,product
@BIOTYPE	ALIAS	gene_biotype,biotype

# case insesitive (all to lower)
#@GENE
@GENE/id	GFF
@GENE/@BIOTYPE	GFF	biotype
@GENE/id	JSON	gene/id	{"object_type":"gene"}
@GENE/@DESCR	JSON	gene/!description	{"_IGNORE":"hypothetical protein"}
@GENE/dbxref	JSON	gene/@xrefs	{"_SPLIT":":;dbname;id", "_MAP":{"UniProt/Swiss-Prot":"Uniprot/SWISSPROT"}}

#@MRNA
@MRNA/id GFF
@MRNA/parent	GFF	# obsolete
@MRNA/@BIOTYPE	GFF	biotype
@MRNA/id	JSON	mrna/id	{"object_type":"transcript"}
@MRNA/product	JSON	gene:_PARENT/!description	{"_IGNORE":"hypothetical protein"}
@MRNA/dbxref	JSON	mrna/@xrefs	{"_SPLIT":":;dbname;id", "_MAP":{"UniProt/Swiss-Prot":"Uniprot/SWISSPROT"}}
@MRNA/stop_codon_redefined_as_selenocysteine	JSON	mrna/force_stop_to_sec	{"force_stop_to_sec":true}

# no @UTR/id
@UTR/parent	GFF	# obsolete

# no exon/id
exon/parent	GFF	# obsolete
exon/@BIOTYPE	GFF	biotype

cds/parent	GFF_SUB	parent	# safeguard for CDSs with no IDs; "metaparser/flybase.conf", "metaparser/cds_with_parent_id.patch" -- for other strategies
cds/id	GFF
cds/protein_id	GFF_SUB	ID,protein_id # overwrite and copy

cds/id	JSON	cds/id	{"object_type":"translation"}
cds/protein_id	JSON_SUB	cds/id	# overwrite
cds/dbxref	JSON	cds/@xrefs	{"_SPLIT":":;dbname;id", "_MAP":{"UniProt/Swiss-Prot":"Uniprot/SWISSPROT"}}

# cds/dbxref	JSON	gene:_PARENT/@xrefs	{"_SPLIT":":;dbname;id", "_MAP": {"NCBI_GP":"GenBank"} } # for tcal patch, mapping should be done with the --xref_map option

# transposable element
transposable_element/id	GFF
transposable_element/id	JSON	transposable_element/id	{"object_type":"transposable_element"}


# SEQ_REGIONS
#   filter them into a separate file

# IDS
@SEQR4ID	ALIAS	chromosome_band,centromere,region,scaffold

@SEQR4ID	JSON	seq_region:_SEQID	{"object_type":"seq_region", "name":"_SEQID"}	# even for plain features, without qualifiers 
#special case for codon_table
cds/transl_table	JSON	seq_region:_SEQID/codon_table	{"object_type":"seq_region", "name":"_SEQID", "_NUMVAL" : "int"}

# aliases
region/name	JSON	seq_region:_SEQID/@synonyms/name	{"_IGNORE":"Unknown"}
region/alias	JSON	seq_region:_SEQID/@synonyms/name	{"_IGNORE":"Unknown"}
scaffold/alias	JSON	seq_region:_SEQID/@synonyms/name	{"_IGNORE":"Unknown"}
region/chromosome	JSON	seq_region:_SEQID/@synonyms/name	{"_IGNORE":"Unknown"}

# is_circular
region/is_circular	JSON	seq_region:_SEQID/circular	{"circular":true}

# location
region/genome	JSON	seq_region:_SEQID/location	{"_MAP": {"chromosome":"nuclear_chromosome", "genomic":"nuclear_chromosome", "mitochondrion":"mitochondrial_chromosome", "apicoplast":"apicoplast_chromosome", "chloroplast":"chloroplast_chromosome"}}

# coord system level, ignore Uknown and genomic
region/genome	JSON	seq_region:_SEQID/coord_system_level	{ "_MAP": {"chromosome":"chromosome", "mitochondrion":"chromosome", "apicoplast":"chromosome", "plasmid": "chromosome", "chloroplast":"chromosome", "genomic":null}, "_IGNORE":["Unknown", "genomic"] }

# karyotype bands
chromosome_band/name	JSON	seq_region:_SEQID/@karyotype_bands/name	{"_SUB":"^band-?;", "start":"_START", "end":"_END"}

centromere/id	JSON	seq_region:_SEQID/@karyotype_bands/name	{"stain":"ACEN", "structure":"centromere", "start":"_START", "end":"_END"}
telomere/id	JSON	seq_region:_SEQID/@karyotype_bands/name	{"stain":"TEL", "structure":"telomere", "start":"_START", "end":"_END"}

# various stuff as karyotype_bands
d_loop/id	JSON	seq_region:_SEQID/@karyotype_bands/name	{ "name": "D_loop", "start":"_START", "end":"_END" }

