// See the NOTICE file distributed with this work for additional information
// regarding copyright ownership.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Set minimum required Nextflow version, stopping execution if current version does not match
nextflowVersion = '!>=23.01'

// Set default for NXF_WORK
NXF_WORK = System.getenv("NXF_WORK") ?: "$PWD/work"

params {
    cache_dir = "$NXF_WORK/cache"
    storeDir_latency = '60'
    brc_mode = 0
    max_database_forks = 10
    
    json_schemas {
        functional_annotation = "${projectDir}/../../../../schemas/functional_annotation_schema.json"
        genome = "${projectDir}/../../../../schemas/genome_schema.json"
        manifest = "${projectDir}/../../../../schemas/manifest_schema.json"
        seq_attrib = "${projectDir}/../../../../schemas/seq_attrib_schema.json"
        seq_region = "${projectDir}/../../../../schemas/seq_region_schema.json"
    }
}

profiles {

    standard {
        executor {
            name = 'local'
        }
    }

    slurm {
        executor {
            name = 'slurm'
            queueGlobalStatus = true
            queueSize = 2000
            submitRateLimit = '10/1sec'
            exitReadTimeout = 30.min
        }
    }

    lsf {
        executor {
            name = 'lsf'
            queue = { task.memory < 300.GB ? 'standard' : 'bigmem' }
            queueGlobalStatus = true
            queueSize = 2000
            submitRateLimit = '10/1sec'
            exitReadTimeout = 30.min
            perJobMemLimit = true
        }
    }

}

process {
    errorStrategy = 'finish'
    cache = 'lenient'

    withLabel: 'local' {
        executor = 'local'
        maxForks = 1
    }
    withLabel: 'default' {
        cpus = 1
        memory = 1.GB
        time = 10.min
    }
    withLabel: 'default_retry' {
        cpus = 1
        time = { 10.min * task.attempt }
        memory = { 1.GB * Math.pow(2, (task.attempt - 1)) }
        errorStrategy = { task.exitStatus in [104, 137, 140, 143] ? 'retry' : 'finish' }
        maxRetries = 3
    }
    withLabel: 'normal' {
        cpus = 1
        memory = 1.GB
        time = 60.min
    }
    withLabel: 'variable_2_8_32' {
        cpus = 1
        time = { 60.min * task.attempt }
        memory = { 2.GB * Math.pow(4, (task.attempt - 1)) }
        errorStrategy = { task.exitStatus in [104, 137, 140, 143] ? 'retry' : 'finish' }
        maxRetries = 3
    }
    withLabel: 'adaptive' {
        cpus = 1
        time = { 60.min * task.attempt }
        memory = { 4.GB * Math.pow(4, (task.attempt - 1)) }
        errorStrategy = { task.exitStatus in [104, 137, 140, 143] ? 'retry' : 'finish' }
        maxRetries = 3
    }
    withLabel: 'cached' {
        storeDir = { "${params.cache_dir}/${task.process.tokenize(':')[-1].toLowerCase()}/${task.tag}" }
        afterScript = { "sleep ${params.storeDir_latency}" }
    }
}
