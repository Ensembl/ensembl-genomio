// See the NOTICE file distributed with this work for additional information
// regarding copyright ownership.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Set minimum required Nextflow version, stopping execution if current version does not match
nextflowVersion = '!>=23.01'

// Set default for NXF_WORK
NXF_WORK = System.getenv("NXF_WORK") ?: "$PWD/work"
ENSEMBL_ROOT_DIR = System.getenv("ENSEMBL_ROOT_DIR") ?: "$PWD"


plugins { id 'nf-schema@2.0.0' }

params {
    help = false
    cache_dir = "$NXF_WORK/cache"
    ensembl_root_dir = "$ENSEMBL_ROOT_DIR"
    storeDir_latency = 60
    brc_mode = 0
    max_database_forks = 10
}

trace {
    // Call "nextflow run ... -with-trace" to activate it
    fields = 'task_id,name,process,hash,status,exit,attempt,submit,time,realtime,cpus,%cpu,memory,%mem'
    // filter = 'name =~ /foo.*/ && status == "FAILED"'
}

profiles {

    standard {
        executor {
            name = 'local'
        }
    }

    slurm {
        executor {
            name = 'slurm'
            queueGlobalStatus = true
            queueSize = 2000
            submitRateLimit = '10/1sec'
            exitReadTimeout = 30.min
        }
        singularity {
            enabled = true
            autoMounts = true
        }
    }

    lsf {
        executor {
            name = 'lsf'
            queue = { task.memory < 300.GB ? 'standard' : 'bigmem' }
            queueGlobalStatus = true
            queueSize = 2000
            submitRateLimit = '10/1sec'
            exitReadTimeout = 30.min
            perJobMemLimit = true
        }
        singularity {
            enabled = true
            autoMounts = true
        }
    }

}

process {
    errorStrategy = 'finish'
    cache = 'lenient'

    withLabel: 'local' {
        executor = 'local'
        maxForks = 1
    }
    withLabel: 'default' {
        cpus = 1
        memory = 1.GB
        time = 10.min
    }
    withLabel: 'default_retry' {
        cpus = 1
        time = { 10.min * task.attempt }
        memory = { 1.GB * Math.pow(2, (task.attempt - 1)) }
        errorStrategy = { task.exitStatus in [104, 137, 140, 143] ? 'retry' : 'finish' }
        maxRetries = 3
    }
    withLabel: 'normal' {
        cpus = 1
        memory = 1.GB
        time = 60.min
    }
    withLabel: 'variable_2_8_32' {
        cpus = 1
        time = { 60.min * task.attempt }
        memory = { 2.GB * Math.pow(4, (task.attempt - 1)) }
        errorStrategy = { task.exitStatus in [104, 137, 140, 143] ? 'retry' : 'finish' }
        maxRetries = 3
    }
    withLabel: 'adaptive' {
        cpus = 1
        time = { 60.min * task.attempt }
        memory = { 4.GB * Math.pow(4, (task.attempt - 1)) }
        errorStrategy = { task.exitStatus in [104, 137, 140, 143] ? 'retry' : 'finish' }
        maxRetries = 3
    }
    withLabel: 'cached' {
        storeDir = { "${params.cache_dir}/${task.process.tokenize(':')[-1].toLowerCase()}/${task.tag}" }
        afterScript = { "sleep ${params.storeDir_latency}" }
    }
    withLabel: 'container_genometools' {
        container = "quay.io/biocontainers/genometools-genometools:1.6.5--py310h3db02ab_0"
    }
    withLabel: 'ensembl_scripts_container' {
        container = "matthieubarba/ensembl-scripts:0.8"
    }
    withLabel: 'datasets_container' {
        container = "ensemblorg/datasets-cli:latest"
    }
}
