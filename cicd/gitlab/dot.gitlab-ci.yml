# See the NOTICE file distributed with this work for additional information
# regarding copyright ownership.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# WORKFLOW RULES -- WHEN TO RUN PIPELINES

# https://docs.gitlab.com/ee/ci/yaml/#workflow
# https://docs.gitlab.com/ee/ci/yaml/workflow.html#switch-between-branch-pipelines-and-merge-request-pipelines

# do not run on commits, as we expect everything to be pushed from GitHub
workflow:
  rules:
     - if: $CI_EXTERNAL_PULL_REQUEST_IID && $CI_COMMIT_BRANCH
     - if: $CI_COMMIT_BRANCH
       when: never

# MB allow for   - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

variables:
  RUN_DIR: ./cicd/runtime

stages:
  - debug
  - test

# In-house stuff

#   CI/CD debugging
debug:gitlab_env:
  # comment out when section to run
  when: manual
  stage: debug
  # using sub-pipeline from ./parts
  trigger:
    strategy: depend
    include:
    - local: /cicd/gitlab/parts/debug.gitlab-ci.yml

#   Python checks
test:python:
  stage: test
  # using sub-pipeline from ./parts
  trigger:
    strategy: depend
    include:
    - local: /cicd/gitlab/parts/python.gitlab-ci.yml

#  Get artifacts from python tests
test:python:artifacts:
  stage: test
  needs:
    - job: test:python
  image: python:3.8
  script:
    # get artifacts from the downstream pipeline using url
    #   https://docs.gitlab.com/ee/ci/jobs/job_artifacts.html#from-a-url-1
    # - 'wget -O $RUN_DIR/artifacts.zip --header "JOB-TOKEN: $CI_JOB_TOKEN" "$GITLAB_URL/api/v4/projects/$CI_PROJECT_ID/jobs/artifacts/$CI_COMMIT_BRANCH/download?job=python:tests:pytest"'
    # DOES NOT WORK: artifacts became accessible only if the run was successful, otherwise they are outdated
    # so going down the GRAPHQL way
    # REST AND GRAPHQL API need auth tokens to be accessed, but
    #   API is not accessible using $CI_JOB_TOKEN
    #   we need a configured "vault" (key storage)
    #   get artifacts url json
    # - 'wget -O - --header "Authorization: Bearer $CI_JOB_TOKEN" --header "Content-Type: application/json" --post-data="{\"query\": \"query { project(fullPath:\\\"$CI_PROJECT_PATH\\\") { pipeline(iid:\\\"$CI_PIPELINE_IID\\\") { job(name:\\\"test:python\\\") { downstreamPipeline { job(name:\\\"python:tests:pytest\\\") { browseArtifactsPath }  }  } }  } }\"}" $CI_API_GRAPHQL_URL | tee $RUN_DIR/test_python_artifacts.json'
    #   get artifacts url
    # - 'cat  $RUN_DIR/test_python_artifacts.json | grep -Po "\"browseArtifactsPath\":\"[^\"]+" | cut -f 4 -d "\""  | perl -pe \"s,/browse$,/download?file_type=archive,\" | tee $RUN_DIR/test_python_artifacts.url_part' 
    # get artifacts from  $CI_SERVER_URL
    # DOES NOT WORK: GraphQL API is not accessible using $CI_JOB_TOKEN
    # trying REST API way 
    # get triggered pipelines info (bridges)
    #   https://docs.gitlab.com/ee/api/jobs.html#list-pipeline-trigger-jobs
    - 'wget -O $RUN_DIR/bridges.json --header "JOB-TOKEN: $CI_JOB_TOKEN" "https://gitlab.ebi.ac.uk/api/v4/projects/$CI_PROJECT_ID/pipelines/$CI_PIPELINE_ID/bridges"'
    # get pipeline.id with "name":"test:python"
    - 'cat $RUN_DIR/bridges.json | python -c "import json; import sys; ps = json.load(sys.stdin); p = filter(lambda x: x.get(\"name\", \"\") == \"test:python\", ps); print(list(p)[0][\"id\"])" > $RUN_DIR/bridge_pipeline_id'
    # get jobs for downstream pipeline with `bridge_pipeline_id`
    #   https://docs.gitlab.com/ee/api/pipelines.html
    - 'cat $RUN_DIR/bridge_pipeline_id | xargs -n 1 -I XXX "wget -O $RUN_DIR/downstream_jobs.json --header \"JOB-TOKEN: $CI_JOB_TOKEN\" \"https://gitlab.ebi.ac.uk/api/v4/projects/$CI_PROJECT_ID/pipelines/XXX/jobs\" " '
    # get job id with name "python:tests:pytest"
    - 'cat $RUN_DIR/downstream_jobs.json | python -c "import json; import sys; js = json.load(sys.stdin); j = filter(lambda x: x.get(\"name\", \"\") == \"python:tests:pytest\", js); print(list(j)[0][\"id\"])" > $RUN_DIR/pytest_job_id'
    # get artifacts for `pytest_job_id`
    #   https://docs.gitlab.com/ee/api/job_artifacts.html
    - 'cat $RUN_DIR/pytest_job_id | xargs -n 1 -I XXX "wget -O $RUN_DIR/artifacts.zip --header \"JOB-TOKEN: $CI_JOB_TOKEN\" \"https://gitlab.ebi.ac.uk/api/v4/projects/$CI_PROJECT_ID/jobs/XXX/artifacts\" "'
    - unzip $RUN_DIR/artifacts.zip # N.B. has $RUN_DIR as the root
    - cat $RUN_DIR/cov_report/txt/report.txt
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'


#   License checks
test:license:
  stage: test
  # using sub-pipeline from ./parts
  trigger:
    strategy: depend
    include:
    - local: /cicd/gitlab/parts/license.gitlab-ci.yml


# external pipelines
#   trying to use those from https://gitlab.com/gitlab-org/gitlab/-/tree/master/lib/gitlab/ci/templates

test:external:code_quality:
  # https://gitlab.ebi.ac.uk/help/user/project/merge_requests/code_quality.md
  when: manual
  stage: test
  trigger:
    strategy: depend
    forward:
      pipeline_variables: false
      yaml_variables: false
    include:
      - template: Code-Quality.gitlab-ci.yml

